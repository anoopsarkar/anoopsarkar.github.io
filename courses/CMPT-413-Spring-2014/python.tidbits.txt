
Here are some python tidbits that may be useful to you in the future. The >>> below means that I typed in the python code into the python interpreter to get the result shown under it.

1. Formatted strings, where you want to insert a value into a string, where %s is a string value, %d is a decimal integer, %f is a floating point number:

>>> print "%s = %d and %s = %f" % ("x", 10, "y", 0.0003)
x = 10 and y = 0.000300

>>> print "The %(foo)s is %(bar)i." % {'foo': 'answer', 'bar':42}
The answer is 42.

>>> print "The {foo} is {bar}".format(foo='answer', bar=42)
The answer is 42


2. List comprehensions are very useful to replace a for-loop. Example below finds unique elements as a one line python program:

>>> x = ['a', 'b', 'c', 'd', 'a', 'b', 'c']
>>> print [ i for i in set(x) ]
['a', 'c', 'b', 'd']

Also, you can use an 'if' statement in a list comprehension:

>>> print [ i for i in set(x) if i != 'a']
['c', 'b', 'd']

Using list comprehensions, the following Python code prints out the lowercased tokens of length greater than 15 from Sense and Sensibility (note that one of them occurs twice):

>>> import nltk
>>> longwords = [ word.lower() for word in nltk.corpus.gutenberg.words('austen-sense') if len(word) > 15]
>>> longwords
['incomprehensible', 'incomprehensible', 'disinterestedness', 'companionableness', 'disqualifications']


3. enumerate is very useful when you want a counter variable for each element in a list:

>>> x = ['a', 'c', 'b', 'd']
>>> for (index,element) in enumerate(x): print index, element
... 
0 a
1 c
2 b
3 d


4. The builtin function 'tuple' can be used to create n-grams from a list of words:

>>> words = ['a', 'good', 'book', 'is', 'all', 'you', 'need', '.']

>>> print [ tuple(words[i:i+2]) for i in range(len(words)-1) ]
[('a', 'good'), ('good', 'book'), ('book', 'is'), ('is', 'all'), ('all', 'you'), ('you', 'need'), ('need', '.')]

>>> print [ tuple(words[i:i+3]) for i in range(len(words)-2) ]
[('a', 'good', 'book'), ('good', 'book', 'is'), ('book', 'is', 'all'), ('is', 'all', 'you'), ('all', 'you', 'need'), ('you', 'need', '.')]


5. The function itemgetter from the operator module in Python provides a concise way to sort on different tuple elements in a list of tuples:

>>> word_freq = [ ('the', 1223), ('a', 2413), ('Mr.', 450), ('Elton', 10) ]
>>> word_freq
[('the', 1223), ('a', 2413), ('Mr.', 450), ('Elton', 10)]

>>> from operator import itemgetter

>>> word_freq.sort(key=itemgetter(1), reverse=True)
>>> word_freq
[('a', 2413), ('the', 1223), ('Mr.', 450), ('Elton', 10)]

Note that itemgetter(1) is set to the 2nd component of the tuple, and used as a key to sort the tuples

>>> word_freq.sort(key=itemgetter(1), reverse=False)
>>> word_freq
[('Elton', 10), ('Mr.', 450), ('the', 1223), ('a', 2413)]

You can also use the built-in 'map' function to get the sorted values:

>>> map(itemgetter(1), word_freq)
[10, 450, 1223, 2413]

>>> map(itemgetter(0), word_freq)
['Elton', 'Mr.', 'the', 'a']


6. A class is an iterator if it has a '__iter__' and 'next' method
defined as shown in this example:

# circular queue 
class cq:
  q = [] # needs to be initialized with a list
  def __init__(self,q): # the argument q is a list 
    self.q = q 
  def __iter__(self): 
    return self 
  def next(self): 
    r = self.q[0]
    self.q = self.q[1:] + [r]  # rotate the list
    return r

x = cq([1,2,3])
x.next()
x.next()
x.next()
x.next()


7. The function islice allows you to take a slice of an iterator.

from itertools import islice
x = cq([1,2,3])
for i in islice(x, 5):
  print i

y = cq([1,2,3,4,5])
for i in islice(y,3): print i
z = [i for i in islice(y,10)]
print z

 
8. The class defaultdict allows convenient insertion into a dictionary

from collections import defaultdict
foo = defaultdict(int)
bar = defaultdict(list)
foo['a'] += 1
foo['a'] += 1
bar['b'].append(1)
bar['b'].append(2)
print foo, bar


9. Generators:

def sum_of_squares(n):
   v = 0
   for i in range(1,n+1):
       v += i*i
       yield v

>>> for i in sum_of_squares(10): print i
... 
1
5
14
30
55
91
140
204
285
385

10. Generator expressions

a = [1,2,3,4]
b = [2*x for x in a]
c = (2*x for x in a)

>>> b
[2, 4, 6, 8]
>>> c
<generator object <genexpr> at 0x37daa8>
>>> for i in c: print i
... 
2
4
6
8

n = ((a,b) for a in range(0,2) for b in range(4,6))
>>> for i in n:
...   print i 

(0, 4)
(0, 5)
(1, 4)
(1, 5)

11. Unpacking tuples and dictionaries:

def concat(x, y):
    return x + y

foo = ('A', 'B')
bar = {'y': 'B', 'x': 'A'}

>>> concat(*foo)
'AB'
>>> concat(**bar)
'AB'

12. It is sometimes good to raise an exception:

def doit(x,y):
  if x < 0:
    raise ValueError("x should be >= 0")
  return y

>>> doit(0,10)
10
>>> doit(-1,10)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 3, in doit
ValueError: x should be >= 0


And finally, some Python easter eggs:

a)

>>> from __future__ import braces
  File "<stdin>", line 1
  SyntaxError: not a chance

b) Save the following to a file and run it using python:

#!/usr/bin/env python
# -*- coding: rot13 -*-

cevag "PZCG-413 oevatf grnef gb zl rlrf!".rapbqr("rot13")

c)
>>> import this
>>> print this.s

d)
import __phello__

